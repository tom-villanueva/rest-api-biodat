[{"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\reportWebVitals.ts":"1","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\RegistrationForm.tsx":"2","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectList.tsx":"3","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\auth.ts":"4","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\SideBar.tsx":"5","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\Footer.tsx":"6","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectItem.tsx":"7","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\modals\\ModalForm.tsx":"8","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\HttpService.ts":"9","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemDeleteForm.tsx":"10","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemEditForm.tsx":"11","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\AuthService.ts":"12","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectDeleteForm.tsx":"13","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\ItemService.ts":"14","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemItem.tsx":"15","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\dashboard\\Dashboard.tsx":"16","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemList.tsx":"17","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectAddForm.tsx":"18","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\files\\FileList.tsx":"19","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\CookieService.ts":"20","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\index.tsx":"21","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\Home.tsx":"22","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\StartPage.tsx":"23","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\LoginForm.tsx":"24","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\ProtectedRoute.tsx":"25","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectEditForm.tsx":"26","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\FileService.ts":"27","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemAddForm.tsx":"28","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\files\\FileItem.tsx":"29","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\ProjectService.ts":"30","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\App.tsx":"31"},{"size":440,"mtime":1611669927928,"results":"32","hashOfConfig":"33"},{"size":3236,"mtime":1611669927896,"results":"34","hashOfConfig":"33"},{"size":5811,"mtime":1611675016268,"results":"35","hashOfConfig":"33"},{"size":401,"mtime":1611669927897,"results":"36","hashOfConfig":"33"},{"size":2381,"mtime":1611669927890,"results":"37","hashOfConfig":"33"},{"size":477,"mtime":1611669927886,"results":"38","hashOfConfig":"33"},{"size":1800,"mtime":1611669927916,"results":"39","hashOfConfig":"33"},{"size":1615,"mtime":1611669927910,"results":"40","hashOfConfig":"33"},{"size":1921,"mtime":1611669927933,"results":"41","hashOfConfig":"33"},{"size":661,"mtime":1612964468620,"results":"42","hashOfConfig":"33"},{"size":1256,"mtime":1612962576052,"results":"43","hashOfConfig":"33"},{"size":1806,"mtime":1611669927931,"results":"44","hashOfConfig":"33"},{"size":659,"mtime":1611669927914,"results":"45","hashOfConfig":"33"},{"size":2400,"mtime":1614872428264,"results":"46","hashOfConfig":"33"},{"size":2012,"mtime":1614869585778,"results":"47","hashOfConfig":"33"},{"size":3627,"mtime":1613047620825,"results":"48","hashOfConfig":"33"},{"size":4405,"mtime":1613048723456,"results":"49","hashOfConfig":"33"},{"size":1808,"mtime":1611669927913,"results":"50","hashOfConfig":"33"},{"size":1723,"mtime":1613047946483,"results":"51","hashOfConfig":"33"},{"size":375,"mtime":1611669927932,"results":"52","hashOfConfig":"33"},{"size":517,"mtime":1611669927922,"results":"53","hashOfConfig":"33"},{"size":655,"mtime":1611669927889,"results":"54","hashOfConfig":"33"},{"size":1086,"mtime":1611669927892,"results":"55","hashOfConfig":"33"},{"size":4233,"mtime":1611669927893,"results":"56","hashOfConfig":"33"},{"size":651,"mtime":1611669927895,"results":"57","hashOfConfig":"33"},{"size":1824,"mtime":1611669927915,"results":"58","hashOfConfig":"33"},{"size":1558,"mtime":1612966491459,"results":"59","hashOfConfig":"33"},{"size":1397,"mtime":1611669927903,"results":"60","hashOfConfig":"33"},{"size":810,"mtime":1613047335429,"results":"61","hashOfConfig":"33"},{"size":1922,"mtime":1611669927936,"results":"62","hashOfConfig":"33"},{"size":1896,"mtime":1611669927883,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"vp4f9g",{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"79"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"79"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"79"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\reportWebVitals.ts",[],["140","141"],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\RegistrationForm.tsx",["142"],"import React, { Component } from \"react\";\r\nimport AuthService from \"../../services/AuthService\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\nexport default class RegistrationForm extends Component<RouteComponentProps> {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    password_confirmation: \"\",\r\n  };\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const postData = {\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        password_confirmation: this.state.password_confirmation,\r\n    }\r\n    const response = await AuthService.doUserRegistration(postData);\r\n\r\n    if (response) {\r\n        AuthService.handleLoginSuccess(response, false);\r\n        this.props.history.push(\"/home\");\r\n    } else {\r\n        alert(\"Algo salió mal\");\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const {email, password, password_confirmation } = this.state;\r\n    return (\r\n      <div className=\"register-box-body\">\r\n        <p className=\"login-box-msg\">Registrar una nueva cuenta</p>\r\n        <form action=\"../../index.html\" method=\"post\" onSubmit={event => this.handleSubmit(event)}>\r\n          <div className=\"form-group has-feedback\">\r\n            <input \r\n                type=\"email\" \r\n                name=\"email\"\r\n                className=\"form-control\" \r\n                placeholder=\"Email\" \r\n                value={ email } \r\n                onChange={event => this.setState({ email: event.target.value })}\r\n            />\r\n            <span className=\"glyphicon glyphicon-envelope form-control-feedback\" />\r\n          </div>\r\n          <div className=\"form-group has-feedback\">\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              className=\"form-control\"\r\n              placeholder=\"Password\"\r\n              value={ password } \r\n              onChange={event => this.setState({ password: event.target.value })}\r\n            />\r\n            <span className=\"glyphicon glyphicon-lock form-control-feedback\" />\r\n          </div>\r\n          <div className=\"form-group has-feedback\">\r\n            <input\r\n              type=\"password\"\r\n              name=\"password_confirmation\"\r\n              className=\"form-control\"\r\n              placeholder=\"Retype password\"\r\n              value={ password_confirmation } \r\n              onChange={event => this.setState({ password_confirmation: event.target.value })}\r\n            />\r\n            <span className=\"glyphicon glyphicon-log-in form-control-feedback\" />\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-8\">\r\n              <div className=\"checkbox icheck\">\r\n                <label>\r\n                  <input type=\"checkbox\" /> I agree to the <a href=\"#\">terms</a>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-xs-4\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block btn-flat\"\r\n              >\r\n                Registrarse\r\n              </button>\r\n            </div>         \r\n          </div>\r\n        </form>\r\n\r\n        <a href=\"login.html\" className=\"text-center\">\r\n          ya tengo una cuenta\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",["143","144"],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectList.tsx",["145"],"import React from \"react\";\r\n\r\nimport ProjectItem from \"./ProjectItem\";\r\nimport ModalForm from \"../modals/ModalForm\";\r\nimport ProjectService from \"../../services/ProjectService\";\r\nimport ProjectAddForm from \"./ProjectAddForm\";\r\nimport ProjectInterface from \"../../interfaces/ProjectInterface\";\r\nimport ProjectEditForm from \"./ProjectEditForm\";\r\nimport ProjectDeleteForm from \"./ProjectDeleteForm\";\r\n\r\nexport default class ProjectList extends React.Component {\r\n  state = {\r\n    showAddModal: false,\r\n    showEditModal: false,\r\n    showDeleteModal: false,\r\n    projects: [],\r\n    targetProject: -1,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const response = await ProjectService.getProjects();\r\n    const projects = response.data;\r\n    this.setState({\r\n      projects: projects,\r\n    });\r\n  }\r\n\r\n  onEdit(id: number) {\r\n    this.setState({\r\n      showEditModal: true,\r\n      targetProject: id,\r\n    });\r\n  }\r\n\r\n  onDelete(id: number) {\r\n    this.setState({\r\n      showDeleteModal: true,\r\n      targetProject: id,\r\n    });\r\n  }\r\n\r\n  renderProjectItems() {\r\n    const { projects } = this.state;\r\n    return projects.map((project, index) => {\r\n      return (\r\n        <ProjectItem\r\n          key={index}\r\n          id={index}\r\n          project={project}\r\n          onEdit={(id) => this.onEdit(id)}\r\n          onDelete={(id) => this.onDelete(id)}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  async handleProjectForm(data) {\r\n    /* Crea el proyecto a nivel base de datos y actualiza la vista */\r\n    const project = await ProjectService.createProject(data);\r\n    let newProjects: ProjectInterface[];\r\n    newProjects = this.state.projects;\r\n    newProjects.push(project.data);\r\n    this.setState({\r\n      projects: newProjects,\r\n      showAddModal: false,\r\n    });\r\n  }\r\n\r\n  async handleProjectEditForm(data) {\r\n    /* Actualiza el proyecto a nivel base de datos y actualiza la vista */\r\n    const newProject = await ProjectService.updateProject(data);\r\n    let newProjects: ProjectInterface[];\r\n    newProjects = this.state.projects;\r\n\r\n    let index: number;\r\n    for (let project of newProjects){\r\n      index = newProjects.indexOf(project);\r\n      if (project.id === this.state.targetProject){\r\n        newProjects[index] = newProject.data;\r\n      }\r\n    }\r\n    this.setState({\r\n      projects: newProjects,\r\n      showEditModal: false,\r\n      targetProject: -1,\r\n    });\r\n  }\r\n\r\n  async handleProjectDeleteForm(data){\r\n    console.log(\"data\", data);\r\n    const status = await ProjectService.deleteProject(data);\r\n    let newProjects: ProjectInterface[];\r\n    newProjects = this.state.projects.filter((project : ProjectInterface) => {\r\n      return project.id !== this.state.targetProject;\r\n    });\r\n    this.setState({\r\n      projects: newProjects,\r\n      showDeleteModal: false,\r\n      targetProject: -1,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { showAddModal, showEditModal, showDeleteModal, projects, targetProject } = this.state;\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <h3 className=\"card-title\">Proyectos</h3>\r\n          <div className=\"card-tools\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-tool\"\r\n              data-card-widget=\"collapse\"\r\n              data-toggle=\"tooltip\"\r\n              title=\"Collapse\"\r\n            >\r\n              <i className=\"fas fa-minus\" />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-tool\"\r\n              data-card-widget=\"remove\"\r\n              data-toggle=\"tooltip\"\r\n              title=\"Remove\"\r\n            >\r\n              <i className=\"fas fa-times\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body p-0\">\r\n          <table className=\"table table-striped projects\">\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>Nombre Proyecto</th>\r\n                <th>Descripción</th>\r\n                <th>Fecha</th>\r\n                <th className=\"text-center\">Acciones</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>{projects.length > 0 && this.renderProjectItems()}</tbody>\r\n          </table>\r\n          <button\r\n            className=\"btn btn-info btn-lg\"\r\n            onClick={() =>\r\n              this.setState({\r\n                showAddModal: true,\r\n              })\r\n            }\r\n          >\r\n            <i className=\"fas fa-plus\"></i>\r\n            Nuevo Proyecto\r\n          </button>\r\n        </div>\r\n        <ModalForm\r\n          title=\"Nuevo Proyecto\"\r\n          visibility={showAddModal}\r\n          onClose={() =>\r\n            this.setState({\r\n              showAddModal: !showAddModal,\r\n            })\r\n          }\r\n        >\r\n          <ProjectAddForm\r\n            handleProjectForm={(data) => this.handleProjectForm(data)}\r\n          />\r\n        </ModalForm>\r\n\r\n        <ModalForm\r\n          title=\"Editar Proyecto\"\r\n          visibility={showEditModal}\r\n          onClose={() =>\r\n            this.setState({\r\n              showEditModal: !showEditModal,\r\n              targetItem: -1,\r\n            })\r\n          }\r\n        >\r\n          <ProjectEditForm\r\n            id={ targetProject }\r\n            handleProjectEditForm={(data) => this.handleProjectEditForm(data)}\r\n          />\r\n        </ModalForm>\r\n\r\n        <ModalForm\r\n          title=\"Eliminar Proyecto\"\r\n          visibility={showDeleteModal}\r\n          onClose={() =>\r\n            this.setState({\r\n              showDeleteModal: !showDeleteModal,\r\n              targetItem: -1,\r\n            })\r\n          }\r\n        >\r\n          <ProjectDeleteForm\r\n            id={ targetProject }\r\n            handleProjectDeleteForm={(data) => this.handleProjectDeleteForm(data)}\r\n          />\r\n        </ModalForm>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\auth.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\SideBar.tsx",["146","147"],"import React, { Component } from \"react\";\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n    return (\r\n      <aside className=\"main-sidebar sidebar-light-primary elevation-4\">\r\n        {/* Brand Logo */}\r\n        <a href=\"index3.html\" className=\"brand-link\">\r\n          <img\r\n            src=\"dist/img/AdminLTELogo.png\"\r\n            alt=\"bioDAT Logo\"\r\n            className=\"brand-image img-circle elevation-3\"\r\n            style={{ opacity: \".8\" }}\r\n          />\r\n          <span className=\"brand-text font-weight-light\">bioDAT</span>\r\n        </a>\r\n        {/* Sidebar */}\r\n        <div className=\"sidebar\">\r\n          {/* Sidebar user panel (optional) */}\r\n          <div className=\"user-panel mt-3 pb-3 mb-3 d-flex\">\r\n            <div className=\"image\">\r\n              <img\r\n                src=\"dist/img/user2-160x160.jpg\"\r\n                className=\"img-circle elevation-2\"\r\n                alt=\"User Image\"\r\n              />\r\n            </div>\r\n            <div className=\"info\">\r\n              <a href=\"#\" className=\"d-block\">\r\n                Nombre de usuario\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <nav className=\"mt-2\">\r\n            <ul\r\n              className=\"nav nav-pills nav-sidebar flex-column\"\r\n              data-widget=\"treeview\"\r\n              role=\"menu\"\r\n              data-accordion=\"false\"\r\n            >\r\n              <li className=\"nav-header\"></li>\r\n              <li className=\"nav-item\">\r\n                <a href=\"/proyectos\" className=\"nav-link\">\r\n                  <i className=\"nav-icon fas fa-table\" />\r\n                  <p>Proyectos</p>\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-header\">Utilidades</li>\r\n              <li className=\"nav-item\">\r\n                <a href=\"pages/calendar.html\" className=\"nav-link\">\r\n                  <i className=\"nav-icon fas fa-bookmark\"></i>\r\n                  <p>Tutoriales</p>\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a href=\"pages/calendar.html\" className=\"nav-link\">\r\n                  <i className=\"nav-icon fas fa-comment-alt\" />\r\n                  <p>Contacto</p>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          {/* /.sidebar-menu */}\r\n        </div>\r\n        {/* /.sidebar */}\r\n      </aside>\r\n    );\r\n  }\r\n}\r\n",["148","149"],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\Footer.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectItem.tsx",["150","151","152","153","154"],"import React, { Component} from 'react'\r\nimport ProjectInterface from '../../interfaces/ProjectInterface';\r\n\r\ninterface Props {\r\n    id: number,\r\n    project: ProjectInterface,\r\n    onEdit: (id) => void, \r\n    onDelete: (id) => void,\r\n}\r\n\r\nexport default class ProjectItem extends Component<Props>{\r\n    render() {\r\n        const { id, project, onEdit, onDelete } = this.props;\r\n        return (\r\n            <tr>\r\n                <td>\r\n                    { id+1 }\r\n                </td>\r\n                <td>\r\n                    <a>\r\n                    { project.title }\r\n                    </a>\r\n                    <br />\r\n                </td>\r\n                <td>\r\n                    <a>\r\n                    { project.description }\r\n                    </a>\r\n                    <br />\r\n                </td>\r\n                <td>\r\n                    <a>\r\n                    { project.created_at.slice(0, 10) }\r\n                    </a>\r\n                    <br />\r\n                </td>\r\n                <td className=\"project-actions text-center\">\r\n                    <a className=\"btn btn-primary btn-sm\" href={'/dashboard/'+project.id}>\r\n                    <i className=\"fas fa-tachometer-alt\">\r\n                    </i>\r\n                    Dashboard\r\n                    </a>\r\n                    <a className=\"btn btn-info btn-sm\" onClick={(id) => onEdit(project.id) }>\r\n                    <i className=\"fas fa-pencil-alt\">\r\n                    </i>                   \r\n                    </a>\r\n                    <a className=\"btn btn-danger btn-sm\" onClick={(id) => onDelete(project.id)}>\r\n                    <i className=\"fas fa-trash\">\r\n                    </i>                   \r\n                    </a>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\modals\\ModalForm.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\HttpService.ts",[],["155","156"],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemDeleteForm.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemEditForm.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\AuthService.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectDeleteForm.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\ItemService.ts",["157"],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemItem.tsx",["158","159","160","161"],"import React, { Component } from 'react'\r\nimport ItemInterface from '../../interfaces/ItemInterface'\r\n\r\ninterface Props {\r\n    item: ItemInterface,\r\n    selectedItem: number,\r\n    onEdit: (id) => void, \r\n    onDelete: (id) => void,\r\n    onSelect: (id) => void,\r\n}\r\n\r\nexport default class ItemItem extends Component<Props> {\r\n\r\n    state = {\r\n        selected: false,\r\n    }\r\n\r\n    async componentDidUpdate(prevProps) {\r\n        if(this.props.selectedItem !== prevProps.selectedItem) {\r\n            if(this.props.selectedItem === this.props.item.id) {\r\n                this.setState({\r\n                    selected: true,\r\n                })\r\n            }  \r\n            else {\r\n                this.setState({\r\n                    selected: false,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    async onSelect(id) {\r\n        this.setState({\r\n            selected: !this.state.selected,\r\n        });\r\n        this.props.onSelect(id);     \r\n    }\r\n\r\n    render() {\r\n        const { item, onEdit, onDelete } = this.props;\r\n        return (\r\n            <tr>\r\n            <td>\r\n                <a className= {`btn btn-sm ${this.state.selected ? \"btn-success\" : \"btn-danger\"}`} \r\n                   onClick={(id) => this.onSelect(item.id) }\r\n                >\r\n                <i className=\"fas fa-check\"></i>\r\n                </a>\r\n            </td>\r\n            <td>\r\n                <a>\r\n                { item.title }\r\n                </a>\r\n                <br />\r\n            </td>\r\n            <td className=\"project-actions text-center\">\r\n                <a className=\"btn btn-info btn-sm\" onClick={(id) => onEdit(item.id) }>\r\n                <i className=\"fas fa-pencil-alt\">\r\n                </i>                   \r\n                </a>\r\n                <a className=\"btn btn-danger btn-sm\" onClick={(id) => onDelete(item.id)}>\r\n                <i className=\"fas fa-trash\">\r\n                </i>                   \r\n                </a>\r\n            </td>\r\n        </tr>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\dashboard\\Dashboard.tsx",["162","163"],"import React, { Component } from 'react';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport ItemList from '../items/ItemList';\r\nimport ItemService from \"../../services/ItemService\";\r\nimport ItemInterface from \"../../interfaces/ItemInterface\";\r\nimport FileList from '../files/FileList';\r\nimport FileService from '../../services/FileService';\r\nimport DataInterface from '../../interfaces/DataInterface';\r\nimport FileInterface from '../../interfaces/FileInterface';\r\n\r\nexport default class Dashboard extends Component<RouteComponentProps> {\r\n    state = {\r\n        project_id: this.props.match.params.id,\r\n        items: [] as ItemInterface[],//ItemInterface[],\r\n        files: [] as FileInterface[],\r\n        selectedItem: -1,\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await ItemService.getProjectItems(this.state.project_id);\r\n        const items = response.data;\r\n        this.setState({\r\n          items: items,\r\n        });\r\n    }\r\n\r\n    async componentDidUpdate(prevState) {\r\n      if(this.state.selectedItem !== prevState.selectedItem){\r\n        const { project_id, selectedItem } = this.state;\r\n        const response = await FileService.getItemFiles(project_id, selectedItem);\r\n        const files = response.data;\r\n        this.setState({\r\n          files: files,\r\n        })\r\n      }\r\n    }\r\n\r\n    async handleAddItem(data){\r\n        const item = await ItemService.createItem(this.state.project_id, data);\r\n        let newItems: ItemInterface[];\r\n        newItems = this.state.items;\r\n        newItems.push(item.data);\r\n        this.setState({\r\n          //items: [...this.state.items, item],\r\n          items: newItems,\r\n        });\r\n    }\r\n\r\n    async handleItemEdit(data, targetItem: number) {\r\n        const newItem = await ItemService.updateItem(this.state.project_id, data.id, data);\r\n    \r\n        let newItems: ItemInterface[];\r\n        newItems = this.state.items;\r\n    \r\n        let index: number;\r\n        for (let item of newItems){\r\n          index = newItems.indexOf(item);\r\n          if (item.id === targetItem){\r\n            newItems[index] = newItem.data;\r\n          }\r\n        }\r\n        this.setState({\r\n          items: newItems,\r\n        });\r\n    }\r\n\r\n    async handleItemDelete(data, targetItem: number) {\r\n        const response = await ItemService.deleteItem(this.state.project_id, data.id);\r\n    \r\n        let newItems: ItemInterface[];\r\n        newItems = this.state.items.filter((item : ItemInterface) => {\r\n          return item.id !== targetItem;\r\n        });\r\n        this.setState({\r\n          items: newItems,\r\n        });\r\n    }\r\n\r\n    async handleSelectedItem(id) {\r\n      this.setState({\r\n        selectedItem: id,\r\n      })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                    <ItemList \r\n                      items = { this.state.items }\r\n                      handleAddItem = { (data) => this.handleAddItem(data) }\r\n                      handleEditItem = { (data, targetItem) => this.handleItemEdit(data, targetItem) }               \r\n                      handleDeleteItem = { (data, targetItem) => this.handleItemDelete(data, targetItem) }\r\n                      handleSelectedItem = { (id) => this.handleSelectedItem(id) }\r\n                    />\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                    <FileList \r\n                      files = { this.state.files }\r\n                    />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemList.tsx",["164"],"import React, { Component } from \"react\";\r\nimport ItemService from \"../../services/ItemService\";\r\nimport ItemInterface from \"../../interfaces/ItemInterface\";\r\nimport ItemAddForm from \"./ItemAddForm\";\r\nimport ItemItem from \"./ItemItem\";\r\nimport ModalForm from \"../modals/ModalForm\"\r\nimport ItemEditForm from \"./ItemEditForm\";\r\nimport ItemDeleteForm from \"./ItemDeleteForm\";\r\n\r\ninterface Props {\r\n  items: ItemInterface[],\r\n  handleAddItem: (data) => void,\r\n  handleEditItem: (data, targetItem: number) => void,\r\n  handleDeleteItem: (data, targetItem: number) => void,\r\n  handleSelectedItem: (id) => void,\r\n}\r\n\r\nexport default class ItemList extends Component<Props> {\r\n  state = {\r\n    items: [] as ItemInterface[],\r\n    targetItem: -1,\r\n    selectedItem: -1,\r\n    showEditModal: false,\r\n    showDeleteModal: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.setState({\r\n      items: this.props.items,\r\n    });\r\n  }\r\n  async componentDidUpdate(prevProps) {\r\n    if(this.props.items !== prevProps.items) {\r\n      this.setState({\r\n        items: this.props.items,\r\n      })\r\n    }\r\n  }\r\n\r\n  onEdit(id: number) {\r\n    this.setState({\r\n      showEditModal: true,\r\n      targetItem: id,\r\n    });\r\n  }\r\n\r\n  onDelete(id: number) {\r\n    this.setState({\r\n      showDeleteModal: true,\r\n      targetItem: id,\r\n    });\r\n  }\r\n\r\n  onSelect(id: number) {\r\n    this.props.handleSelectedItem(id);\r\n    this.setState({\r\n      selectedItem: id,\r\n    })\r\n  }\r\n\r\n  renderItems() {\r\n    const { items, selectedItem } = this.state;\r\n    return items.map((item, index) => {\r\n      return (\r\n        <ItemItem\r\n          key={index}\r\n          item={item}\r\n          selectedItem={selectedItem}\r\n          onEdit={(id) => this.onEdit(id)}\r\n          onDelete={(id) => this.onDelete(id)}\r\n          onSelect={(id) => this.onSelect(id)}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  async handleAddItem(data){\r\n    this.props.handleAddItem(data)\r\n  }\r\n\r\n  async handleItemEditForm(data) {\r\n    this.props.handleEditItem(data, this.state.targetItem)\r\n    this.setState({\r\n      showEditModal: false,\r\n      targetItem: -1,\r\n    });\r\n  }\r\n\r\n  async handleItemDeleteForm(data) {\r\n    this.props.handleDeleteItem(data, this.state.targetItem)\r\n    this.setState({\r\n      showDeleteModal: false,\r\n      targetItem: -1,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { items, targetItem, showEditModal, showDeleteModal } = this.state;\r\n    return (\r\n      <div className=\"card card-primary\">\r\n        <div className=\"card-header\">\r\n          <h3 className=\"card-title\">Items</h3>\r\n          <div className=\"card-tools\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-tool\"\r\n              data-card-widget=\"collapse\"\r\n            >\r\n              <i className=\"fas fa-plus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <ItemAddForm handleAddItem={ (data) => this.handleAddItem(data) } />\r\n          <table className=\"table table-striped projects\">\r\n            <thead>\r\n              <tr>\r\n                <th>Seleccionado</th>\r\n                <th>nombre del item</th>\r\n                <th className=\"text-center\">Acciones</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {items.length > 0 && this.renderItems()}</tbody>\r\n          </table>\r\n          <ModalForm \r\n            title=\"Editar Item\"\r\n            visibility={ showEditModal }\r\n            onClose={() =>\r\n                this.setState({\r\n                  showEditModal: !showEditModal,\r\n                  targetItem: -1\r\n                })\r\n            }\r\n          >\r\n            <ItemEditForm \r\n              id={ targetItem } \r\n              handleItemEditForm={(data) => \r\n                this.handleItemEditForm(data)\r\n              } \r\n            />\r\n          </ModalForm>\r\n          <ModalForm\r\n            title=\"Eliminar Item\"\r\n            visibility={ showDeleteModal }\r\n            onClose={() =>\r\n                this.setState({\r\n                  showDeleteModal: !showDeleteModal,\r\n                  targetItem: -1\r\n                })\r\n            }\r\n          >\r\n            <ItemDeleteForm \r\n              id={ targetItem } \r\n              handleItemDeleteForm={ (data) => \r\n                this.handleItemDeleteForm(data) \r\n              }\r\n            />\r\n          </ModalForm>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectAddForm.tsx",["165"],"import React, { Component } from 'react';\r\n\r\ninterface Props {\r\n    handleProjectForm: (data) => void;\r\n}\r\n\r\nexport default class ProjectAddForm extends Component<Props>{\r\n\r\n    state={\r\n        title:\"\",\r\n        description:\"\",\r\n    }\r\n\r\n    handleFormSubmit(event){\r\n        event.preventDefault();\r\n        const {title, description} = this.state;\r\n        this.props.handleProjectForm({title, description});\r\n    }\r\n\r\n    render() {\r\n        const {title, description} = this.state;\r\n        const {handleProjectForm} = this.props;\r\n        return(\r\n            <form onSubmit={(event) => this.handleFormSubmit(event) }>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\"> Título </label>\r\n                    <input\r\n                        className=\"form-control\" \r\n                        type=\"text\"\r\n                        value={title}\r\n                        placeholder=\"Escriba el título\"\r\n                        onChange={(event) => {\r\n                            this.setState({ title: event.target.value })\r\n                        }}\r\n                    >\r\n                    </input>\r\n                    <label htmlFor=\"description\"> Descripción </label>\r\n                    <input\r\n                        className=\"form-control\" \r\n                        type=\"text\"\r\n                        value={description}\r\n                        placeholder=\"Escriba la descripción\"\r\n                        onChange={(event) => {\r\n                            this.setState({ description: event.target.value })\r\n                        }}\r\n                    >\r\n                    </input>\r\n                    <button className=\"btn btn-primary\">Agregar Proyecto</button>\r\n                </div>\r\n            </form>    \r\n        )\r\n    }\r\n}","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\files\\FileList.tsx",["166","167"],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\CookieService.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\index.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\Home.tsx",["168"],"import React, { Component } from 'react';\r\n\r\nimport Header from './Header';\r\nimport SideBar from './SideBar';\r\nimport Footer from './Footer';\r\nimport Content from './Content';\r\nimport ProjectList from './projects/ProjectList';\r\n\r\ninterface Props {\r\n    title: string\r\n}\r\n\r\nexport default class Home extends Component<Props> {\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <Header />\r\n                <SideBar />\r\n                <Content title={this.props.title}> \r\n                    {this.props.children}\r\n                </Content>\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\StartPage.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\LoginForm.tsx",["169"],"import React, { Component } from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport AuthService from \"../../services/AuthService\";\r\n\r\nclass LoginForm extends Component<RouteComponentProps> {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    isChecked: false,\r\n  };\r\n\r\n  async handleFormSubmit(event) {\r\n    event.preventDefault();\r\n    const postData = {\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n    };\r\n    const response = await AuthService.doUserLogin(postData);\r\n\r\n    if (response) {\r\n      AuthService.handleLoginSuccess(response, this.state.isChecked);\r\n      this.props.history.push(\"/home\");\r\n    } else {\r\n      alert(\"Revise sus credenciales e inténtelo de vuelta\");\r\n    }\r\n  }\r\n\r\n  handleChecked() {\r\n    this.setState({ isChecked: !this.state.isChecked });\r\n  }\r\n\r\n  render() {\r\n    const { email, password, isChecked } = this.state;\r\n    return (\r\n      <div className=\"container-fluid text-center\">\r\n        <div className=\"login-box\">\r\n          <div className=\"login-logo\">\r\n            <a href=\"#\">\r\n              <b>bio</b>DAT\r\n            </a>\r\n          </div>\r\n          {/* /.login-logo */}\r\n          <div className=\"card\">\r\n            <div className=\"card-body login-card-body\">\r\n              <p className=\"login-box-msg\">Iniciar Sesión en bioDAT</p>\r\n              <form\r\n                action=\"#\"\r\n                method=\"post\"\r\n                onSubmit={(event) => this.handleFormSubmit(event)}\r\n              >\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"user\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Email\"\r\n                    value={email}\r\n                    onChange={(event) =>\r\n                      this.setState({ email: event.target.value })\r\n                    }\r\n                  />\r\n                  <div className=\"input-group-append\">\r\n                    <div className=\"input-group-text\">\r\n                      <span className=\"fas fa-envelope\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Password\"\r\n                    value={password}\r\n                    onChange={(event) =>\r\n                      this.setState({ password: event.target.value })\r\n                    }\r\n                  />\r\n                  <div className=\"input-group-append\">\r\n                    <div className=\"input-group-text\">\r\n                      <span className=\"fas fa-lock\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col-8\">\r\n                    <div className=\"icheck-primary\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id=\"remember\"\r\n                        onChange={() => this.handleChecked()}\r\n                        checked={isChecked}\r\n                      />\r\n                      <label onClick={() => this.handleChecked()}>\r\n                        Recuérdame\r\n                      </label>\r\n                    </div>\r\n                  </div>\r\n                  {/* /.col */}\r\n                  <div className=\"col-4\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                      Iniciar Sesión\r\n                    </button>\r\n                  </div>\r\n                  {/* /.col */}\r\n                </div>\r\n              </form>\r\n              <p className=\"mb-1\">\r\n                <a href=\"forgot-password.html\">Olvidé mi contraseña</a>\r\n              </p>\r\n              <p className=\"mb-0\">\r\n                <a href=\"register.html\" className=\"text-center\">\r\n                  Registrar nueva cuenta\r\n                </a>\r\n              </p>\r\n            </div>\r\n            {/* /.login-card-body */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\auth\\ProtectedRoute.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\projects\\ProjectEditForm.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\FileService.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\items\\ItemAddForm.tsx",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\components\\files\\FileItem.tsx",["170","171"],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\services\\ProjectService.ts",[],"C:\\Users\\tomas\\Documents\\GitHub\\rest-api-biodat\\frontendreact\\src\\App.tsx",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":73,"column":60,"nodeType":"178","endLine":73,"endColumn":72},{"ruleId":"172","replacedBy":"179"},{"ruleId":"174","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":91,"column":11,"nodeType":"183","messageId":"184","endLine":91,"endColumn":17},{"ruleId":"185","severity":1,"message":"186","line":22,"column":15,"nodeType":"178","endLine":26,"endColumn":17},{"ruleId":"176","severity":1,"message":"177","line":29,"column":15,"nodeType":"178","endLine":29,"endColumn":47},{"ruleId":"172","replacedBy":"187"},{"ruleId":"174","replacedBy":"188"},{"ruleId":"176","severity":1,"message":"189","line":20,"column":21,"nodeType":"178","endLine":20,"endColumn":24},{"ruleId":"176","severity":1,"message":"189","line":26,"column":21,"nodeType":"178","endLine":26,"endColumn":24},{"ruleId":"176","severity":1,"message":"189","line":32,"column":21,"nodeType":"178","endLine":32,"endColumn":24},{"ruleId":"176","severity":1,"message":"189","line":43,"column":21,"nodeType":"178","endLine":43,"endColumn":94},{"ruleId":"176","severity":1,"message":"189","line":47,"column":21,"nodeType":"178","endLine":47,"endColumn":97},{"ruleId":"172","replacedBy":"190"},{"ruleId":"174","replacedBy":"191"},{"ruleId":"181","severity":1,"message":"192","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":20},{"ruleId":"176","severity":1,"message":"189","line":45,"column":17,"nodeType":"178","endLine":47,"endColumn":18},{"ruleId":"176","severity":1,"message":"189","line":52,"column":17,"nodeType":"178","endLine":52,"endColumn":20},{"ruleId":"176","severity":1,"message":"189","line":58,"column":17,"nodeType":"178","endLine":58,"endColumn":87},{"ruleId":"176","severity":1,"message":"189","line":62,"column":17,"nodeType":"178","endLine":62,"endColumn":90},{"ruleId":"181","severity":1,"message":"193","line":8,"column":8,"nodeType":"183","messageId":"184","endLine":8,"endColumn":21},{"ruleId":"181","severity":1,"message":"194","line":68,"column":15,"nodeType":"183","messageId":"184","endLine":68,"endColumn":23},{"ruleId":"181","severity":1,"message":"195","line":2,"column":8,"nodeType":"183","messageId":"184","endLine":2,"endColumn":19},{"ruleId":"181","severity":1,"message":"196","line":22,"column":16,"nodeType":"183","messageId":"184","endLine":22,"endColumn":33},{"ruleId":"181","severity":1,"message":"193","line":2,"column":8,"nodeType":"183","messageId":"184","endLine":2,"endColumn":21},{"ruleId":"197","severity":1,"message":"198","line":10,"column":1,"nodeType":"199","endLine":72,"endColumn":2},{"ruleId":"181","severity":1,"message":"200","line":7,"column":8,"nodeType":"183","messageId":"184","endLine":7,"endColumn":19},{"ruleId":"176","severity":1,"message":"177","line":38,"column":13,"nodeType":"178","endLine":38,"endColumn":25},{"ruleId":"176","severity":1,"message":"189","line":19,"column":17,"nodeType":"178","endLine":22,"endColumn":18},{"ruleId":"176","severity":1,"message":"189","line":27,"column":17,"nodeType":"178","endLine":27,"endColumn":20},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["201"],["202"],"@typescript-eslint/no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["201"],["202"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["201"],["202"],"'useHistory' is defined but never used.","'DataInterface' is defined but never used.","'response' is assigned a value but never used.","'ItemService' is defined but never used.","'handleProjectForm' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","'ProjectList' is defined but never used.","no-global-assign","no-unsafe-negation"]